import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetServerSideProps, NextPage } from 'next';

import { getLoteria, Loterias } from '../../services/api-caixa';
import {
  getDisplayTextAccumulatedValue,
  getFormatedAccumulatedValue,
  getLoteriaDataConfig,
  LoteriaDataConfig
} from '../../utils';

type LoteriaData = {
  accumulatedValue?: string;
  displayTextAccumulatedValue?: string;
  contestNumber?: number;
  contestDate?: string;
};

type LoteriaProps = {
  loteriaData: LoteriaData;
  loteriaDataConfig: LoteriaDataConfig;
};

const Loteria: NextPage<LoteriaProps> = ({
  loteriaData,
  loteriaDataConfig
}) => {
  const router = useRouter();
  const { loteria } = router.query;

  return (
    <>
      <Head>
        <title>{loteria}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>oi</h1>
    </>
  );
};

export default Loteria;

export const getServerSideProps: GetServerSideProps = async ctx => {
  const loteria = ctx?.params?.loteria as Loterias;
  const NO_CACHE = ctx?.query?.no_cahe as string;

  if (!(NO_CACHE === 'true')) {
    const INVALIDATE_TTL = 60 * 60 * 1; // 1hours
    ctx.res.setHeader(
      'Cache-Control',
      `public, s-maxage=10, stale-while-revalidate=${INVALIDATE_TTL}`
    );
  } else {
    ctx.res.setHeader(
      'Cache-Control',
      `Cache-Control: no-cache, no-store, max-age=0, must-revalidate`
    );
  }

  const data = await getLoteria(loteria);

  const loteriaDataConfig = getLoteriaDataConfig(loteria);

  const value =
    data && data.valor_acumulado > 0
      ? data?.valor_acumulado
      : data?.valor_estimado_proximo_concurso;

  const accumulatedValue = getFormatedAccumulatedValue(value);
  const displayTextAccumulatedValue = getDisplayTextAccumulatedValue(value);

  const loteriaData: LoteriaData = {
    accumulatedValue,
    displayTextAccumulatedValue,
    contestDate: new Date(data?.data_concurso as string).toLocaleDateString(
      'pt-BR',
      {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      }
    ),
    contestNumber: data?.numero_concurso
  };

  return {
    props: {
      loteriaData,
      loteriaDataConfig
    }
  };
};
