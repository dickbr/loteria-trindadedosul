import Head from 'next/head'
import { Box, Text } from '@chakra-ui/react'
import LotomaniaImage from '../../assets/images/loterias/lotomania.png'
import DuplasenaImage from '../../assets/images/loterias/dupla-sena.png'
import LotofacilImage from '../../assets/images/loterias/lotofacil.png'
import MegasenaImage from '../../assets/images/loterias/megasena.png'
import QuinaImage from '../../assets/images/loterias/quina.png'
import TimemaniaImage from '../../assets/images/loterias/timemania.png'
import { useRouter } from 'next/router'
import { getLoteria } from '../../services/api-caixa'
import { StaticImageData } from 'next/image'
import { GetServerSideProps } from 'next'

type LoteriaData = {
  accumulatedValue?: string;
  displayTextAccumulatedValue?: string;
  contestNumber?: number;
  contestDate?: string;
}

type LoteriaDataConfig = {
  image: StaticImageData;
  textColor: string;
}

type LoteriaProps = {
  loteriaData: LoteriaData;
  loteriaDataConfig: LoteriaDataConfig;
}

export default function Loteria({ loteriaData, loteriaDataConfig }: LoteriaProps) {
  const router = useRouter();
  const { loteria } = router.query;

  return (
    <>
      <Head>
        <title>{loteria}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        h="100vh"
        w="100vw"
        position="absolute"
      >
          <Box
            bgImage={loteriaDataConfig.image.src}
            h="100vh"
            bgSize="cover"
            bgPosition="center"
            position="relative"
          >
              <Text 
                color={loteriaDataConfig.textColor}
                fontWeight="bold" 
                fontFamily={'Branding SF Cnd'}
                fontSize={'8xl'}
                paddingLeft="13rem"
                paddingTop="11rem"
                position={'relative'}
                id="accumulatedValue"
                className="accumulatedValue"
              >
                {loteriaData.accumulatedValue}
              </Text>
              <Text
                color={loteriaDataConfig.textColor}
                fontWeight="bold"
                fontFamily={'Branding SF Cnd'}
                fontSize={'9xl'}
                paddingLeft="7rem"
                position={'relative'}
                id="accumulatedValue"
                className="accumulatedValue"
              >
                {loteriaData.displayTextAccumulatedValue}
              </Text>
              <Text
                color={loteriaDataConfig.textColor}
                fontWeight="bold"
                fontSize={'5xl'}
                paddingLeft="22rem"
                paddingTop="8.4rem"
                id="contestNumber"
                className="contestNumber"
                position={'absolute'}
              >
                {loteriaData.contestNumber}
              </Text>
              <Text
                color={loteriaDataConfig.textColor}
                fontWeight="bold"
                fontSize={'5xl'}
                paddingLeft="19rem"
                paddingTop="9.7rem"
                id="contestDate"
                className="contestDate"
                position={'absolute'}
              >
                {loteriaData.contestDate}
              </Text>
          </Box>
      </Box>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const loteria = ctx?.params?.loteria
  const no_cahe = ctx?.query?.no_cahe as string;

  if(!(no_cahe === 'true')){
    const invalidate_ttl = 60 * 60 * 1 // 1hours
    ctx.res.setHeader(
      'Cache-Control',
      `public, s-maxage=10, stale-while-revalidate=${invalidate_ttl}`
    )
  }else{
    ctx.res.setHeader(
      'Cache-Control',
      `Cache-Control: no-cache, no-store, max-age=0, must-revalidate`
    )
  }

  const data = await getLoteria(loteria as string)

  let loteriaDataConfig = getLoteriaDataConfig(loteria as string)

  const value = data && data.valor_acumulado > 0
    ? data?.valor_acumulado
    : data?.valor_estimado_proximo_concurso

  const accumulatedValue = getFormatedAccumulatedValue(value);
  const displayTextAccumulatedValue = getDisplayTextAccumulatedValue(value);

  const loteriaData: LoteriaData = {
    accumulatedValue,
    displayTextAccumulatedValue,
    contestDate: new Date(data?.data_concurso as string).toLocaleDateString('pt-BR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }),
    contestNumber: data?.numero_concurso
  } 
    
  return {
    props: {
      loteriaData,
      loteriaDataConfig
    }
  }
}

const getFormatedAccumulatedValue = (accumulatedValue: number = 0): string => {
  const value = accumulatedValue?.toLocaleString('pt-BR', {
    maximumFractionDigits: 2,
    minimumFractionDigits: 2,
    currency: 'BLR'
  });

  const [first, second] = value.split('.');

  return valueParsed(first, second);
}

const valueParsed = (value: string, complement?: string): string => {
  if(value.length === 3){
    return value;
  }

  if(value.length === 2){
    const sliceValue = complement?.slice(0, 1);
    return `${value},${sliceValue}`
  }

  if(value.length === 1){
    const sliceValue = complement?.slice(0, 1);
    return `${value},${sliceValue}`
  }

  return '';
  
}

const getDisplayTextAccumulatedValue = (accumulatedValue: number = 0): string => {
  const [ currency ] = accumulatedValue?.toString().split('.') as string[];
  switch (currency.length) {
    case 9:
    case 8:
    case 7:
      return 'MilhÃµes'
    case 6:
    case 5:
    case 4:
      return 'Mil'
    default:
      return ''
  }
}

const getLoteriaDataConfig = (loteria: string): LoteriaDataConfig => {
  switch (loteria) {
  case 'lotomania':
    return {
      image: LotomaniaImage,
      textColor: '#fa6403',
    };
  case 'duplasena':
    return {
      image: DuplasenaImage,
      textColor: 'whiteAlpha.900',
    };
  case 'lotofacil':
    return {
      image: LotofacilImage,
      textColor: 'whiteAlpha.900',
    };
  case 'megasena':
    return {
      image: MegasenaImage,
      textColor: 'whiteAlpha.900',
    };
  case 'quina':
    return {
      image: QuinaImage,
      textColor: 'whiteAlpha.900',
    };
  case 'timenaia':
    return {
      image: TimemaniaImage,
      textColor: 'whiteAlpha.900',
    };
  default:
    return {
      image: LotomaniaImage,
      textColor: 'red.500',
    };
  }
}